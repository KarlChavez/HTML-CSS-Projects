import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Karl Chavez
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {

        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * This method checks whether the XML Tree is RSS and is version 2.
         * Returns a 1 if true. Anything else returns a -1
         */

        if (tag.equals("rss") && xml.attributeValue("version").equals("2.0")) {
            return 1;
        } else {
            return -1;
        }
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        boolean c = true;
        //looks for pubdate and prints it out
        for (int k = 0; k < item.numberOfChildren(); k++) {
            if (item.child(k).label().equals("pubDate")) {

                out.print("\t\t<td>");
                out.print(item.child(k).child(0).label());
                out.println("</td>");

                c = false;
            }

        }
        //if there is no date provided
        if (c) {
            out.println("\t\t<td>No date available</td>");
        }

        //looks for source link and prints it out
        for (int k = 0; k < item.numberOfChildren(); k++) {
            if (item.child(k).label().equals("source")) {
                out.print("\t\t<td><a href=\"");
                out.print(item.child(k).attributeValue("url"));
                out.print("\">");
            }

        }

        boolean d = true;
        //looks for source name and prints it out
        for (int k = 0; k < item.numberOfChildren(); k++) {
            if (item.child(k).label().equals("source")) {
                out.print(item.child(k).child(0));
                out.println("</a></td>");
                d = false;
            }
        }
        //if there is no source provided
        if (d) {
            out.println("\t\t<td>No source available</td>");
        }

        //looks for the news link
        for (int k = 0; k < item.numberOfChildren(); k++) {
            if (item.child(k).label().equals("link")) {
                out.print("\t\t<td><a href=\"");
                out.print(item.child(k).child(0));
                out.print("\">");
            }

        }

        boolean e = true;
        //looks for the title of the news
        for (int k = 0; k < item.numberOfChildren(); k++) {
            if (item.child(k).label().equals("title")) {
                out.print(item.child(k).child(0).label());
                out.println("</a></td>");
                e = false;
            }
        }
        //if there is no title available
        if (e) {
            out.println("\t\t<td>No title available</td>");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //asks for the input of the URL
        out.print("Enter the URL of an RSS 2.0 feed: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);

        //passing a variable through SimpleWriter
        out.print("Enter an output file name including .html: ");
        String fileName = in.nextLine();
        SimpleWriter file = new SimpleWriter1L(fileName);

        /*
         * This if statement checks whether the xml has the root label is an
         * <rss> tag and has version attribute with value 2.0
         */

        if (getChildElement(xml, xml.label()) == 1) {

            /*
             * Assuming that it's a rss version 2.0, we can print out things
             * that are indeed a valid RSS 2.0 feed
             */
            //prints out the html tag
            file.println("<html xmlns=\"http://www.w3.org/1999/xhtml/\">");

            //printing out the collapsed Borders
            file.print("<style>");
            file.print("table, th, td {");
            file.print("\tborder: 1px solid black;");
            file.print("\tborder-collapse: collapse;");
            file.print("}");
            file.println("</style>");

            //prints out the title link
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                if (xml.child(0).child(i).label().equals("link")) {
                    file.print("<h2><a href=\"");
                    file.print(xml.child(0).child(i).child(0).label());
                    file.print("\">");
                }
            }

            boolean a = true;
            //prints out title
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                if (xml.child(0).child(i).label().equals("title")) {
                    file.print(xml.child(0).child(i).child(0).label());
                    file.println("</a></h2>");
                    a = false;
                }
            }
            //if there is no title
            if (a) {
                file.print("Empty Title");
            }

            boolean b = true;
            //looking for a description label and printing it out
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                if (xml.child(0).child(i).label().equals("description")) {
                    file.print("<p>");
                    file.print(xml.child(0).child(i).child(0).label());
                    file.println("</p>");
                    b = false;
                }
            }
            //if there is no description
            if (b) {
                file.print("No description");
            }

            //printing out the table
            file.println("<table style=\"width:100%\">");
            file.println("<tr>");

            //uses the method to print out the headers
            outputHeader(xml.child(0), file);

            //looking for every item and printing out the date, source, and News
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                //if it a tag label called item

                if (xml.child(0).child(i).label().equals("item")) {
                    file.println("\t<tr>");

                    //method repeats
                    processItem(xml.child(0).child(i), file);

                    file.println("\t</tr>");
                }
            }

            //using the method outputFooter to print the ending of the html file
            outputFooter(file);

        }

        //closing all the files
        file.close();
        in.close();
        out.close();
    }

}
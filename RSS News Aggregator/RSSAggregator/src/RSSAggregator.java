import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Karl Chavez
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<rss version=\"2.0\">");
        out.println("<html xmlns=\\\"http://www.w3.org/1999/xhtml/\\\">");
        out.println("<head>");

        //style of the border
        out.println("<style>");
        out.println("table, th, td {");
        out.println("\tborder: 1px solid black;");
        out.println("\tborder-collapse: collapse;");
        out.println("}");
        out.println("</style>");

        out.print("<title>");
        //prints out the title for every child. If not, it prints out empty title
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() == 0) {
            out.print("Empty Title");
        } else {
            out.print(channel.child(getChildElement(channel, "title")).label());
        }
        out.println("</title>");
        out.println("</head>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //prints out the closing tags of the HTML file
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //false until it's found
        int index = -1;

        //check is it's a tag
        if (xml.isTag()) {
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                //if the tag label equals to the string
                if (tag.equals(xml.child(i).label())) {
                    index = i;
                    //breaks the loop
                    i = xml.numberOfChildren();
                }
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("\t<tr>");

        //finds if the child's pubdate is available
        if (getChildElement(item, "pubDate") != -1) {
            out.print("\t\t<td>");
            out.print(item.child(getChildElement(item, "pubDate")).child(0)
                    .label());
            out.println("</td>");
        }
        //prints out No date available
        else {
            out.print("\t\t<td>");
            out.print("No date available");
            out.println("</td>");
        }

        //finds if the child's source is available
        if (getChildElement(item, "source") != -1) {
            out.print("\t\t<td><a href=\"");
            out.print(item.child(getChildElement(item, "source"))
                    .attributeValue("url"));
            out.print("\">");
            out.print(item.child(getChildElement(item, "source")).child(0)
                    .label());
            out.println("</a></td>");
        }
        //prints out No source available
        else {
            out.print("\t\t<td>");
            out.print("No source available");
            out.println("</td>");
        }

        /*
         * finds child labeled title AND also checks if it's empty. One of the
         * requirements of rss
         */
        if ((getChildElement(item, "title") != -1)
                && (item.child(getChildElement(item, "title"))
                        .numberOfChildren() != 0)) {

            /*
             * if there is a link to the title, then it will have it. Otherwise,
             * the the title will print without the link
             */
            if (getChildElement(item, "link") != -1) {
                out.print("\t\t<td><a href=\"");
                out.print(item.child(getChildElement(item, "link")).child(0)
                        .label());
                out.print("\">");
                out.print(item.child(getChildElement(item, "title")).child(0)
                        .label());
                out.println("</a></td>");
            }

            //printing the title without the link
            else {
                out.print("/t<td>");
                out.print(item.child(getChildElement(item, "title")).child(0)
                        .label());
                out.println("</td>");
            }
        }

        else if ((getChildElement(item, "description") != -1)
                && (item.child(getChildElement(item, "description"))
                        .numberOfChildren() != 0)) {

            /*
             * If there is a link associated with the description, then it will
             * print the link as well. Otherwise, the description is just
             * printed
             */

            if (getChildElement(item, "link") != -1) {
                out.print("\t<td><a href=\"");
                out.print(item.child(getChildElement(item, "link")).child(0)
                        .label());
                out.print("\">");
                out.print(item.child(getChildElement(item, "description"))
                        .child(0).label());
                out.println("</a></td>");
            }

            //The description is just printed out without link
            else {
                out.print("\t<td>");
                out.print(item.child(getChildElement(item, "description"))
                        .child(0).label());
                out.println("<\td>");
            }
        }

        else {

            //if there is a link
            if (getChildElement(item, "link") != -1) {
                out.print("\t<td><a href=\"");
                out.print(item.child(getChildElement(item, "link")).child(0)
                        .label());
                out.print("\">");
                out.print("\"No title available\"");
                out.println("</a></td>");
            }

            // if the link isn't provided, print out no title
            else {
                out.print("\t<td>");
                out.print("No title available");
                out.println("<\td>");
            }
        }

        out.println("\t</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        /*
         * Everything in the processFeed method is just a copy and pasted
         * version of the RSSReader assignment. Instead of asking for the file
         * name, there is a passing parameter for it
         */

        //the URL given will be converted into an xml tree
        XMLTree xml = new XMLTree1(url);

        //it obtains the tree node channel
        XMLTree channel = xml.child(0);

        //checks whether it's an rss
        if (xml.label().equals("rss")) {

            String fileName = file;
            SimpleWriter filePrint = new SimpleWriter1L(fileName);

            //prints out the header using the file and the node channel
            outputHeader(channel, filePrint);

            //checks if the title tag has a text child or not
            if (channel.child(getChildElement(channel, "title"))
                    .numberOfChildren() != 0) {

                //prints the heading with the link
                filePrint.print("<h1><a href =\"");
                filePrint.print(channel.child(getChildElement(channel, "link"))
                        .child(0).label());
                filePrint.print("\">");
                filePrint.print(channel.child(getChildElement(channel, "title"))
                        .child(0).label());
                filePrint.println("</a></h1>");
            }

            //print out the description
            if (channel.child(getChildElement(channel, "description"))
                    .numberOfChildren() != 0) {
                filePrint.print("<p>");
                filePrint.print(
                        channel.child(getChildElement(channel, "description"))
                                .child(0).label());
                filePrint.println("</p>");
            }

            //no description
            else {
                filePrint.println("No description available");
            }

            //if channel has the tag item
            if (getChildElement(channel, "item") != -1) {

                //this is what creates the table
                filePrint.println("<table style=\"width:100%\">");
                filePrint.println("  <tr>");
                filePrint.println("\t<th>Date</th>");
                filePrint.println("\t<th>Source</th>");
                filePrint.println("\t<th>News</th>");
                filePrint.println("  </tr>");

                //it will go through each item in channel
                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    if (channel.child(i).label().equals("item")) {

                        //writes the html code into the file for each row
                        processItem(channel.child(i), filePrint);

                    }
                }

                //prints out the closing tags
                outputFooter(filePrint);
            }
            filePrint.close();

        } else {
            out.println("Invalid RSS 2.0 news feed.");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //asks for the XML URL
        out.print("Enter the name of an XML file: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);

        //asks for the name of the html file
        out.print("Enter the name of the file (include .html): ");
        String fileName = in.nextLine();
        SimpleWriter input = new SimpleWriter1L(fileName);

        input.println("<html>");
        input.println("<head>");
        //prints out the title of the URL
        input.println("<title>");
        input.println(xml.attributeValue("title"));
        input.println("</title>");
        input.println("</head>");

        //prints out the header
        input.println("<h1>");
        input.println(xml.attributeValue("title"));
        input.println("</h1>");

        //the html code for an unordered lists
        input.println("<ul>");

        /*
         * I will be using a for loop to go through each feed in the parent node
         * "feed" and print them in an unordered list
         */
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            /*
             * This method creates an html file for all the feeds. The files
             * need to be created FIRST to access them as if they were links
             */
            processFeed(xml.child(i).attributeValue("url"),
                    xml.child(i).attributeValue("file"), out);

            input.print("\t<li>");
            input.print("<a href=\"");
            //inserts the file name. The file acts as a link
            input.print(xml.child(i).attributeValue("file"));
            input.print("\">");
            input.print(xml.child(i).attributeValue("name"));
            input.print("</a>");
            input.println("</li>");

        }

        //closing tags
        input.println("</ul>");
        input.println("</body>");
        input.println("</html>");

        input.close();
        in.close();
        out.close();
    }

}
